---
title: "Rで論文を書く実践的なテクニック集 (後編)"
date: 2023-01-15
author: Kazuharu Yanagimoto
draft: true
categories: [R, Quarto, Japanese]
image: https://source.unsplash.com/5QgIuuBxKwM
twitter-card:
  image: https://source.unsplash.com/5QgIuuBxKwM
execute:
  warning: false
  message: false
  cache: false
format:
  html:
    keep-md: true
---


# Tips in Plots {background-color="#1C5253" visibility="uncounted"}

## Data-ink Ratio

<br>

::: {.callout-note}

## Data-ink Ratio Principle [@tufte_visual_2001]

Maximize the data-ink ratio in a plot:

$$
\text{Data-ink ratio} := \frac{\text{Data-ink}}{\text{Total ink used to print in the graphic}}
$$

:::

. . .

<br>

::: {.callout-tip}
## Collolary

Omit all the proportions of a graphic that can be erased without losing information

:::

## Maximize Data-ink Ratio {auto-animate="true"}

<br>

:::: {.columns}

::: {.column width="50%"}

```{.r}
accident_bike |>
  ggplot(aes(x = type_person, fill = gender)) +
  geom_bar(position = "dodge")
```
:::

::: {.column width="50%"}

```{r}
#| echo: false

accident_bike <- arrow::read_parquet(here("data/cleaned/accident_bike.parquet")) |>
  filter(!is.na(type_person), !is.na(gender), is_hospitalized)

p <- accident_bike |>
  ggplot(aes(x = type_person, fill = gender)) +
  geom_bar(position = "dodge")

p
```

:::

::::


## Maximize Data-ink Ratio {auto-animate="true"}

<br>

:::: {.columns}

::: {.column width="50%"}

```{.r code-line-numbers="4-7"}
accident_bike |>
  ggplot(aes(x = type_person, fill = gender)) +
  geom_bar(position = "dodge") +
  labs(x = NULL, y = NULL, fill = NULL) +
  theme_minimal() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.x = element_blank())
```
:::

::: {.column width="50%"}

```{r}
#| echo: false
#| fig-cap: Number of Persons Hospitalized

p +
  labs(x = NULL, y = NULL, fill = NULL) +
  theme_minimal() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.x = element_blank())
```

:::

::::

- Omit axis label. The title of the plot can tell them
- Omit legend label. The label "gender" does not add any information
- Omit background grids

## More Readability: Order Bar Plot {auto-animate="true"}

<br>

:::: {.columns}

::: {.column width="50%"}

```{.r code-line-numbers="2,3,5,10,12"}
accident_bike |>
  ggplot(aes(x = fct_rev(type_person),
         fill = fct_rev(gender))) +
  geom_bar(position = "dodge") +
  coord_flip() +
  labs(x = NULL, y = NULL, fill = NULL) +
  theme_minimal() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.y = element_blank(),
        legend.position = c(0.9, 0.1)) +
  guides(fill = guide_legend(reverse = TRUE))
```
:::

::: {.column width="50%"}

```{r}
#| echo: false
#| fig-cap: Number of Persons Hospitalized

accident_bike |>
  ggplot(aes(x = fct_rev(type_person),
         fill = fct_rev(gender))) +
  geom_bar(position = "dodge") +
  coord_flip() +
  labs(x = NULL, y = NULL, fill = NULL) +
  theme_minimal() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.y = element_blank(),
        legend.position = c(0.9, 0.1)) +
  guides(fill = guide_legend(reverse = TRUE))
```

:::

::::

- Coord flipped. Reorder the factor variables
- Put legends inside the plot to make the plot bigger

## More Readability: Increase Font Size {auto-animate="true"}

<br>

:::: {.columns}

::: {.column width="50%"}

```{.r code-line-numbers="11-13"}
accident_bike |>
  ggplot(aes(x = fct_rev(type_person),
         fill = fct_rev(gender))) +
  geom_bar(position = "dodge") +
  coord_flip() +
  labs(x = NULL, y = NULL, fill = NULL) +
  theme_minimal() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.y = element_blank(),
        legend.position = c(0.9, 0.1),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 25),
        legend.text = element_text(size = 20)) +
  guides(fill = guide_legend(reverse = TRUE))
```
:::

::: {.column width="50%"}

```{r}
#| echo: false
#| fig-cap: Number of Persons Hospitalized

accident_bike |>
  ggplot(aes(x = fct_rev(type_person),
         fill = fct_rev(gender))) +
  geom_bar(position = "dodge") +
  coord_flip() +
  labs(x = NULL, y = NULL, fill = NULL) +
  theme_minimal() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.y = element_blank(),
        legend.position = c(0.9, 0.1),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 25),
        legend.text = element_text(size = 20)) +
  guides(fill = guide_legend(reverse = TRUE))
```

:::

::::

## R Color Brewer’s Palettes

![](https://r-graph-gallery.com/38-rcolorbrewers-palettes_files/figure-html/thecode-1.png){height=700 fig-align="center"}

## R Color Brewer’s Palettes

<br>

```{r}
#| fig-cap: Number of Persons Hospitalized
#| output-location: column
#| code-line-numbers: "7"

accident_bike |>
  ggplot(aes(x = fct_rev(type_person),
         fill = fct_rev(gender))) +
  geom_bar(position = "dodge") +
  coord_flip() +
  labs(x = NULL, y = NULL, fill = NULL) +
  scale_fill_brewer(palette = "Accent") +
  theme_minimal() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.y = element_blank(),
        legend.position = c(0.9, 0.1),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 25),
        legend.text = element_text(size = 20)) +
  guides(fill = guide_legend(reverse = TRUE))
```

## Color-Safe Pallette: Okabe-Ito Palette

<br>

```{r}
#| fig-cap: Number of Persons Hospitalized
#| output-location: column
#| code-line-numbers: "7"

accident_bike |>
  ggplot(aes(x = fct_rev(type_person),
         fill = fct_rev(gender))) +
  geom_bar(position = "dodge") +
  coord_flip() +
  labs(x = NULL, y = NULL, fill = NULL) +
  see::scale_fill_okabeito() +
  theme_minimal() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.y = element_blank(),
        legend.position = c(0.9, 0.1),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 25),
        legend.text = element_text(size = 20)) +
  guides(fill = guide_legend(reverse = TRUE))
```

## Custom Palette

<br>

```{r}
#| fig-cap: Number of Persons Hospitalized
#| output-location: column
#| code-line-numbers: "7"

accident_bike |>
  ggplot(aes(x = fct_rev(type_person),
         fill = fct_rev(gender))) +
  geom_bar(position = "dodge") +
  coord_flip() +
  labs(x = NULL, y = NULL, fill = NULL) +
  scale_fill_manual(values = c("#E7B800", "#00AFBB")) +
  theme_minimal() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.y = element_blank(),
        legend.position = c(0.9, 0.1),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 25),
        legend.text = element_text(size = 20)) +
  guides(fill = guide_legend(reverse = TRUE))
```

## Fonts

:::: {.columns}

::: {.column width="60%"}
#### [Goolge Fonts](https://fonts.google.com/)

- You can download well-designed free fonts
- My recommendation: **Condensed** fonts

::: {.small}
  Roboto Condensed, Fira Sans Condensed, IBM Plex Sans Condensed,...

:::

<br>

::: {.fragment}

#### [showtext](https://cran.rstudio.com/web/packages/showtext/vignettes/introduction.html)

- Your collaborators need to download the fonts
- `font_add_google()` and `showtext_auto()` automatically solve the problem

:::

:::

::: {.column width="40%"}
<br>

![](img/google_fonts.png)
:::

::::

## Roboto Condensed

<br>

```{r}
#| fig-cap: Number of Persons Hospitalized
#| output-location: column
#| code-line-numbers: "1-5,17-19"

library(showtext)
font_base  <- "Roboto Condensed"
font_light <- "Roboto Condensed Light 300"
font_add_google(font_base, font_light)
showtext_auto()

accident_bike |>
  ggplot(aes(x = fct_rev(type_person), fill = fct_rev(gender))) +
  geom_bar(position = "dodge") +
  coord_flip() +
  labs(x = NULL, y = NULL, fill = NULL) +
  see::scale_fill_okabeito() +
  theme_minimal() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.y = element_blank(),
        legend.position = c(0.9, 0.1),
        axis.text.x = element_text(size = 20, family = font_light),
        axis.text.y = element_text(size = 25, family = font_base),
        legend.text = element_text(size = 20, family = font_light)) +
  guides(fill = guide_legend(reverse = TRUE))
```


## Global Options

<br>

Don't worry. You can set the default theme before plotting.
(e.g. @scherer_ggplot_2021)

<br>

```{.r}
theme_set(theme_minimal(base_size = 12, base_family = "Roboto Condensed"))
theme_update(
  axis.ticks = element_line(color = "grey92"),
  axis.ticks.length = unit(.5, "lines"),
  panel.grid.minor = element_blank(),
  legend.title = element_text(size = 12),
  legend.text = element_text(color = "grey30"),
  plot.title = element_text(size = 18, face = "bold"),
  plot.subtitle = element_text(size = 12, color = "grey30"),
  plot.caption = element_text(size = 9, margin = margin(t = 15))
)
```

<br>

Alternatively, create a custom theme and color palette (e.g. @heiss_who_2021)

## Third-party Themes: `hrbrthemes`

<br>

```{r}
#| fig-cap: Number of Persons Hospitalized
#| output-location: column
#| code-line-numbers: "7,8"

accident_bike |>
  ggplot(aes(x = fct_rev(type_person),
         fill = fct_rev(gender))) +
  geom_bar(position = "dodge") +
  coord_flip() +
  labs(x = NULL, y = NULL, fill = NULL) +
  hrbrthemes::scale_fill_ipsum() +
  hrbrthemes::theme_ipsum_rc() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.y = element_blank(),
        legend.position = c(0.9, 0.1),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 25),
        legend.text = element_text(size = 20)) +
  guides(fill = guide_legend(reverse = TRUE))
```

## Third-party Themes:: `ggpubr` & ggsci Plaette

<br>

```{r}
#| fig-cap: Number of Persons Hospitalized
#| output-location: column
#| code-line-numbers: "7,16"

p <- accident_bike |>
  ggplot(aes(x = fct_rev(type_person),
         fill = fct_rev(gender))) +
  geom_bar(position = "dodge") +
  coord_flip() +
  labs(x = NULL, y = NULL, fill = NULL) +
  ggpubr::theme_pubr() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.y = element_blank(),
        legend.position = c(0.9, 0.1),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 25),
        legend.text = element_text(size = 20)) +
  guides(fill = guide_legend(reverse = TRUE))

ggpubr::set_palette(p, "jco") # choose one of ggsci palette
```


## Patchwork

```{r}
#| echo: false
p_default <- accident_bike |>
  ggplot(aes(x = fct_rev(type_person),
         fill = fct_rev(gender))) +
  geom_bar(position = "dodge") +
  coord_flip() +
  labs(x = NULL, y = NULL, fill = NULL, title = "Default") +
  theme_minimal() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.y = element_blank(),
        legend.position = c(0.9, 0.2),
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 12),
        legend.text = element_text(size = 10),
        plot.title.position = "plot") +
  guides(fill = guide_legend(reverse = TRUE))

p_custom <- accident_bike |>
  ggplot(aes(x = fct_rev(type_person), fill = fct_rev(gender))) +
  geom_bar(position = "dodge") +
  coord_flip() +
  labs(x = NULL, y = NULL, fill = NULL, title = "Custom Theme") +
  see::scale_fill_okabeito() +
  theme_minimal() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.y = element_blank(),
        legend.position = c(0.9, 0.2),
        plot.title = element_text(size = 15, family = font_base, face = "bold"),
        axis.text.x = element_text(size = 10, family = font_light),
        axis.text.y = element_text(size = 12, family = font_base),
        legend.text = element_text(size = 10, family = font_light),
        plot.title.position = "plot") +
  guides(fill = guide_legend(reverse = TRUE))

p_hrbrthemes <- accident_bike |>
  ggplot(aes(x = fct_rev(type_person),
         fill = fct_rev(gender))) +
  geom_bar(position = "dodge") +
  coord_flip() +
  labs(x = NULL, y = NULL, fill = NULL, title = "hrbrthemes") +
  hrbrthemes::scale_fill_ipsum() +
  hrbrthemes::theme_ipsum_rc() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.y = element_blank(),
        legend.position = c(0.9, 0.2),
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 12),
        legend.text = element_text(size = 10),
        plot.title.position = "plot") +
  guides(fill = guide_legend(reverse = TRUE))

p_ggpubr <- accident_bike |>
  ggplot(aes(x = fct_rev(type_person),
         fill = fct_rev(gender))) +
  geom_bar(position = "dodge") +
  coord_flip() +
  labs(x = NULL, y = NULL, fill = NULL, title = "ggpubr & ggsci") +
  ggpubr::theme_pubr() +
  scale_fill_manual(values = ggpubr::get_palette("jco", 2)) +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.y = element_blank(),
        legend.position = c(0.9, 0.3),
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 12),
        legend.text = element_text(size = 10),
        plot.title.position = "plot") +
  guides(fill = guide_legend(reverse = TRUE))
```

```{r}
#| fig-align: center
library(patchwork)

(p_default + p_custom) / (p_hrbrthemes + p_ggpubr)
```

## Takeaway

#### Maximize Data-ink Ratio

- Omit all the unnecessary elements in a plot

#### Colors & Fonts

- **Color Palette**: `RColorBrewer`, Okabe-Ito, `ggsci`
- **Fonts**: Google Fonts with `showtext`. Especially, _condensed_ fonts.
- **Ready-made Themes**: `hrbrthemes`, `ggpubr`

#### Further Readings (Online Books)

- "Data Visualization: A Practical Introduction" **@healy_data_2018**
- "Fundamentals of Data Visualization" **@wilke_fundamentals_2019**


# Automated Table Creation {background-color="#1C5253" visibility="uncounted"}

## `kableExtra`: Example

:::: {.columns}

::: {.column width="60%"}
```{r}
#| echo: false
data <- arrow::read_parquet(here("data/cleaned/accident_bike.parquet"))

tab <- data |>
  filter(!is.na(weather), !is.na(gender)) |>
  group_by(year, gender, weather) |>
  count() |>
  pivot_wider(names_from = gender, values_from = n, names_prefix = "n_") |>
  pivot_wider(names_from = year, values_from = starts_with("n_"))
```

```{r}
tab
```

::: {.fragment fragment-index=1}

```{r}
library(kableExtra)
options(knitr.kable.NA = '')

ktb <- tab |>
  kbl(format = "latex", booktabs = TRUE,
      col.names = c(" ", 2019:2022, 2019:2022)) |>
  add_header_above(c(" ", "Men" = 4, "Women" = 4)) |>
  pack_rows(index = c("Good" = 2, "Bad" = 4))

ktb |>
  save_kable(here("output/tex/kableextra/tb_accident_bike.tex"))
```

:::

:::

::: {.column width="40%"}
![](img/kableextra.png)

::: {.fragment fragment-index=2}
::: {.small}

- `booktabs = TRUE` for `booktabs` package in LaTeX
- You can specify the column names by `col.names`
- You can pack columns and rows by `add_header_above()` and `pack_rows()`
- `save_kable()` saves in a tex file if the file name ends with ".tex"

:::
:::
:::

::::

## `kableExtra`

**Dataframe (`tibble`) to Table**

- Create a tibble table by `dplyr::group_by` & `dpyr::summarize` and `janitor::tabyl()`
- For regression tables, you can use `modelsummary` (next slide)

**Pack Columns and Rows**

- As far as I know, Python, Julia, and Stata do not allow us to pack them easily

**More Complicated Tables**

- You can refer to Hao Zhu's [document](https://haozhu233.github.io/kableExtra/awesome_table_in_pdf.pdf)
- If a table contains a mathematical expression, use `escape=FALSE`. See a discussion in [stacoverflow](https://stackoverflow.com/questions/59776466/kableextra-math-symbols)


## `modelsummary`

```{r}
#| echo: false

data <- arrow::read_parquet(here("data/cleaned/accident_bike.parquet")) |>
  mutate(is_died = injury8 == "Died within 24 hours",
         is_hospitalized = injury8 %in% c("Hospitalization after 24 hours",
                                          "Hospitalization within 24 hours",
                                          "Died within 24 hours"))
                                          
```

Given the following regression results,

<br>

```{r}
library(fixest) # for faster regression with fixed effect

models <- list(
    "(1)" = feglm(is_hospitalized ~ type_person + positive_alcohol + positive_drug | age_c + gender,
                family = binomial(logit), data = data),
    "(2)" = feglm(is_hospitalized ~ type_person + positive_alcohol + positive_drug | age_c + gender + type_vehicle,
                family = binomial(logit), data = data),
    "(3)" = feglm(is_hospitalized ~ type_person + positive_alcohol + positive_drug | age_c + gender + type_vehicle + weather,
                family = binomial(logit), data = data),
    "(4)" = feglm(is_died ~ type_person + positive_alcohol + positive_drug | age_c + gender,
                family = binomial(logit), data = data),
    "(5)" = feglm(is_died ~ type_person + positive_alcohol + positive_drug | age_c + gender + type_vehicle,
                family = binomial(logit), data = data),
    "(6)" = feglm(is_died ~ type_person + positive_alcohol + positive_drug | age_c + gender + type_vehicle + weather,
                family = binomial(logit), data = data)
)

```


## `modelsummary`: Init {auto-animate="true"}

<br>

:::: {.columns}

::: {.column width="60%"}
```{.r}
modelsummary(models)
```

:::

::: {.column width="40%"}
::: {style="font-size: 0.3em"}
```{r}
#| echo: false

gm <- tibble(
    raw = c("nobs", "FE: age_c", "FE: gender", "FE: type_vehicle", "FE: weather"),
    clean = c("Observations", "FE: Age Group", "FE: Gender", "FE: Type of Vehicle", "FE: Weather"),
    fmt = c(0, 0, 0, 0, 0)
)

cm  <-  c(
    "type_personPassenger" = "Passenger",
    "type_personPedestrian" = "Pedestrian",
    "positive_alcoholTRUE" = "Positive Alcohol"
)

library(modelsummary)
modelsummary(models)
```
:::
:::
::::

## `modelsummary`: Modify Coefficients {auto-animate="true"}

<br>

:::: {.columns}

::: {.column width="60%"}
```{.r code-line-numbers="1-5,8"}
cm  <-  c(
    "type_personPassenger" = "Passenger",
    "type_personPedestrian" = "Pedestrian",
    "positive_alcoholTRUE" = "Positive Alcohol"
)

modelsummary(models,
  coef_map = cm
)
```

:::

::: {.column width="40%"}
::: {style="font-size: 0.3em"}
```{r}
#| echo: false

modelsummary(models,
  coef_map = cm  
)
```
:::
:::
::::

## `modelsummary`: Modify Statitics {auto-animate="true"}

<br>

:::: {.columns}

::: {.column width="60%"}
```{.r code-line-numbers="7-11,15"}
cm  <-  c(
    "type_personPassenger" = "Passenger",
    "type_personPedestrian" = "Pedestrian",
    "positive_alcoholTRUE" = "Positive Alcohol"
)

gm <- tibble(
    raw = c("nobs", "FE: age_c", "FE: gender", "FE: type_vehicle", "FE: weather"),
    clean = c("Observations", "FE: Age Group", "FE: Gender", "FE: Type of Vehicle", "FE: Weather"),
    fmt = c(0, 0, 0, 0, 0)
)

modelsummary(models,
  coef_map = cm,
  gof_map = gm
)
```

:::

::: {.column width="40%"}
::: {style="font-size: 0.3em"}
```{r}
#| echo: false

modelsummary(models,
  coef_map = cm,
  gof_map = gm
)
```
:::
:::
::::

## `modelsummary`: Stars & Headers {auto-animate="true"}

<br>

:::: {.columns}

::: {.column width="60%"}
```{.r code-line-numbers="14,17"}
code-line-numbers="7,16"
cm  <-  c(
    "type_personPassenger" = "Passenger",
    "type_personPedestrian" = "Pedestrian",
    "positive_alcoholTRUE" = "Positive Alcohol"
)

gm <- tibble(
    raw = c("nobs", "FE: age_c", "FE: gender", "FE: type_vehicle", "FE: weather"),
    clean = c("Observations", "FE: Age Group", "FE: Gender", "FE: Type of Vehicle", "FE: Weather"),
    fmt = c(0, 0, 0, 0, 0)
)

modelsummary(models,
  stars = c("+" = .1, "*" = .05, "**" = .01),
  coef_map = cm,
  gof_map = gm) |>
  add_header_above(c(" ", "Hospitalization" = 3, "Died within 24 hours" = 3)) 
```

:::

::: {.column width="40%"}
::: {style="font-size: 0.3em"}
```{r}
#| echo: false

modelsummary(models,
  stars = c("+" = .1, "*" = .05, "**" = .01),
  coef_map = cm,
  gof_map = gm) |>
  add_header_above(c(" ", "Hospitalization" = 3, "Died within 24 hours" = 3))
```
:::
:::
::::

## `modelsummary`: Export to $\LaTeX$ {auto-animate="true"}

<br>

:::: {.columns}

::: {.column width="60%"}
```{.r code-line-numbers="14,19,20"}
cm  <-  c(
    "type_personPassenger" = "Passenger",
    "type_personPedestrian" = "Pedestrian",
    "positive_alcoholTRUE" = "Positive Alcohol"
)

gm <- tibble(
    raw = c("nobs", "FE: age_c", "FE: gender", "FE: type_vehicle", "FE: weather"),
    clean = c("Observations", "FE: Age Group", "FE: Gender", "FE: Type of Vehicle", "FE: Weather"),
    fmt = c(0, 0, 0, 0, 0)
)

modelsummary(models,
  output = "latex_tabular",
  stars = c("+" = .1, "*" = .05, "**" = .01),
  coef_map = cm,
  gof_map = gm) |>
  add_header_above(c(" ", "Hospitalization" = 3, "Died within 24 hours" = 3)) |>
  row_spec(7, hline_after = T) |>
  save_kable(here("output/tex/modelsummary/reg_accident_bike.tex"))
```

:::

::: {.column width="40%"}

![](img/modelsummary.png)

:::
::::

<br>

`output = "latex_tabular"` produces a tex file not containing `table` tag

## Takeaway

<br>

#### `kableExtra` & `modelsummary`

- You can quickly export tibble (dataframe) as latex table by `kableExtra`
- `modelsummary` produces kableExtra object from regression results
- You can see the latex table in `output/tex/` and the compiled results in `code/thesis/`

<br>

#### Further Readings

- Official Document [modelsummary](https://vincentarelbundock.github.io/modelsummary/articles/modelsummary.html) and @zhu_create_2021
- [gt](https://gt.rstudio.com/articles/intro-creating-gt-tables.html) is a great alternative to `kableExtra`. I use `gt` tables in my slides
