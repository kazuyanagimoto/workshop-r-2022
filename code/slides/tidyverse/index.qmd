---
execute:
    echo: true
    warning: false
    message: false
    cache: false
format:
  revealjs:
    standalone: false
    embed-resources: false
    width: 1600
    height: 900
    theme: [default, custom.scss]
    slide-number: true
    fig-cap-location: top
    fig-format: svg
    pdf-separate-fragments: false
---

## {background-image="https://source.unsplash.com/AT77Q0Njnt0" visibility="uncounted"}

::: {.title}
An Introduction to `tidyverse`
:::

::: {.author}
Kazuharu Yanagimoto
:::

::: {.date}
January 13, 2023
:::

```{r}
#| include: false
library(tidyverse)
library(here)
```

# Introduction {visibility="hidden"}

## {background-image="img/tidyverse.png"}

## Pipe Operator `|>`

<br>

`|>` inserts the previous object into the **first argument** of the next function

<br>

:::: {.columns}

::: {.column width="50%"}
```{r}
mtcars |>
  subset(cyl==4) |>
  head()
```
:::

::: {.column width="50%"}
```{r}
head(subset(mtcars, cyl==4))
```
:::

::::



## Pipe Operator `|>`

<br>

To insert it to the second or later argument, you can use `_`

```{r}
mtcars |>
  lm(mpg ~ disp, data = _)
```

<br>

- `%>%` in `tidyverse` used to be used
- `|>` is officially supported and recommended after R version 4.1
- `|>` works without loading any package, but `%>%` needs `magnitr`

## `tibble`

<br>

In `tidyverse` packages, data frames are handled by `tibble` format.

:::: {.columns}

::: {.column width="50%"}
```{r}
tibble(
  x = 1:5, 
  y = 1, 
  z = x ^ 2 + y
)
```
:::

::: {.column width="50%"}
```{r}
tibble::tribble(
  ~x, ~y, ~z,
  "a", 2, 3.6,
  "b", 1, 8.5
)
```
:::

::::

<br>

For detail, see [Tibbles vs. data.frame](https://r4ds.had.co.nz/tibbles.html#tibbles-vs.-data.frame) in @wickham_r_2017


# dplyr Basics {background-color="#1C5253" visibility="uncounted"}

## `glimpse`

```{r}
library(palmerpenguins) # Example Dataset
penguins |>
  head()
```


```{r}
penguins |>
  glimpse()
```

## `select`


```{r}
penguins |>
  select(species, body_mass_g:year, starts_with("bill")) |>
  head()
```


```{r}
penguins |>
  select(-year) |>
  head()
```


## `filter`

```{r}
penguins |>
  filter(year >= 2008, between(bill_length_mm, 39, 41)) |>
  head()
```

```{r}
penguins |>
  filter(!is.na(sex)) |>
  head()
```

## `rename`

```{r}
penguins |>
  rename(gender = sex) |> # I know it is penguin
  head()
```

You can rename when you select

```{r}
penguins |>
  select(time = year, gender = sex, starts_with("bill")) |>
  head()
```

## `mutate`

<br>

```{r}
penguins |>
  mutate(
    flipper_length_cm = flipper_length_mm / 10,
    sex = recode(sex, male = "Male", female = "Female"),
    species_by_sex = case_when(
      species == "Adelie" & sex == "Male" ~ "Am",
      species == "Adelie" & sex == "Female" ~ "Af",
      species == "Chinstrap" & sex == "Memale" ~ "Cm",
      species == "Chinstrap" & sex == "Female" ~ "Cf",
      species == "Gentoo" & sex == "Male" ~ "Gm",
      species == "Gentoo" & sex == "Female" ~ "Gf",
    )) |>
  head()
```

## `summarize` & `group_by`

<br>

```{r}
penguins |>
  filter(!is.na(sex)) |>
  group_by(species, sex) |>
  summarize(
    mean_bill_length_mm = mean(bill_length_mm, na.rm = TRUE),
    sd_bill_length_mm = sd(bill_length_mm, na.rm = TRUE)
  )
```

## `across` & `mutate`

<br>

```{r}
penguins |>
  mutate(across(bill_length_mm:bill_depth_mm, ~.x / 10)) |>
  rename_at(vars(bill_length_mm:bill_depth_mm), ~str_replace(.x, "mm", "cm")) |>
  head()
```

- You can replace existing columns at once by `across()`
- `~` creates an anonymous (temporal) function. `.x` is the argument

## `across` & `summarize`

<br>

```{r}
penguins |>
  filter(!is.na(sex)) |>
  group_by(species, sex) |>
  summarize(
    across(bill_length_mm:body_mass_g,
          list(mean = ~mean(.x, na.rm = TRUE),
               sd = ~sd(.x, na.rm = TRUE)))
  )
```

- You can summarize multiple columns by multiple functions at once
- The names in the list becomes the suffix of the new columns

## `janitor::tabyl()`

<br>

:::: {.columns}

::: {.column width="50%"}
```{r}
penguins |>
  janitor::tabyl(species)
```
:::

::: {.column width="50%"}
```{r}
penguins |>
  janitor::tabyl(species, sex)
```
:::

::::

:::: {.columns}

::: {.column width="50%"}
```{r}
penguins |>
  janitor::tabyl(species) |>
  janitor::adorn_percentages()
```
:::

::: {.column width="50%"}
```{r}
penguins |>
  janitor::tabyl(species, sex) |>
  janitor::adorn_percentages(denominator = "row")
```
:::

::::

<br>

`janitor::tabyl()` gives frequency tables in `tibble` format

## `*_join()`

- `inner_join(df1, df2)`
- `left_join(df1, df2)`
- `right_join(df1, df2)`
- `full_join(df1, df2)`
- `semi_join(df1, df2)`
- `anti_join(df1, df2)`

In most of cases, `left_join` is enough. For details of other functions, read [Rational data](https://r4ds.had.co.nz/relational-data.html) section in @wickham_r_2017.

## `left_join()`

```{r}
library(nycflights13) # Dataset
flights |> glimpse()
```


```{r}
planes |> glimpse()
```

## `left_join()`

<br>

```{r}
flights |>
  left_join(planes, by = "tailnum", suffix = c("", "_built")) |>
  select(year, month, day, dep_time, arr_time, carrier, flight, tailnum, year_built, type, model)
```

<br>

If the key name is different, you can write `by = c("LEFT_KEY" = "RIGHT_KEY)`

# tidyr Basics {background-color="#1C5253" visibility="uncounted"}

## Tidy Data Approach

<br>

::: {.callout-note}

## **Tidy Data** (@wickham_tidy_2014, @wickham_r_2017)

1. Each _variable_ must have its own column.
1. Each _observation_ must have its own row.
1. Each _value_ must have its own cell.

:::

<br>

Hence, _tidy data_ is in long format rather than in wide format (unlike Stata...)


## `pivot_longer` & `pivot_wider`

This data is not _tidy_

```{r}
#| echo: false
tb1 <- tribble(
  ~country, ~`1999`, ~`2000`,
  "Afghanistan",  745,   2666,
  "Brazil",     37737,  80488,
  "China",     212258, 213766
) 

tb2 <- tribble(
  ~country,     ~year, ~type,          ~count,
  "Afghanistan", 1999, "cases",           745,
  "Afghanistan", 1999, "population", 19987071,
  "Afghanistan", 2000, "cases",          2666,
  "Afghanistan", 2000, "population", 20595360,
  "Brazil",      1999, "cases",         37737,
  "Brazil",      1999, "population",172006362
)
```

:::: {.columns}

::: {.column width="50%"}

```{r}
tb1
```

:::

::: {.column width="50%"}

```{r}
tb2
```

:::

::::

Make it _tidy_

:::: {.columns}

::: {.column width="50%"}
```{r}
tb1 |>
  pivot_longer(c(`1999`, `2000`),
    names_to = "year", values_to = "cases")
```
:::

::: {.column width="50%"}
```{r}
tb2 |>
  pivot_wider(names_from = type, values_from = count)
```
:::

::::




## `separate` & `unite`

This data is not _tidy_

```{r}
#| echo: false
tb1 <- tribble(
  ~country,      ~year,  ~rate,
  "Afghanistan", 1999, "745/19987071",     
  "Afghanistan", 2000, "2666/20595360",    
  "Brazil",      1999, "37737/172006362",  
  "Brazil",      2000, "80488/174504898",  
  "China",       1999, "212258/1272915272",
  "China",       2000, "213766/1280428583"
)

tb2 <- tribble(
  ~country,   ~century, ~year_d2, ~cases, ~population,
  "Afghanistan",    19,       99, 745,    19987071,  
  "Afghanistan",    20,       00, 2666,   20595360,  
  "Brazil",         19,       99, 37737,  172006362, 
  "Brazil",         20,       00, 80488,  174504898, 
  "China",          19,       99, 212258, 1272915272,
  "China",          20,       00, 213766, 1280428583
)

```

:::: {.columns}

::: {.column width="50%"}
```{r}
tb1
```
:::

::: {.column width="50%"}

```{r}
tb2
```

:::
::::

Make it _tidy_


:::: {.columns}

::: {.column width="50%"}
```{r}
tb1 |> 
  separate(rate, into = c("cases", "population")) |>
  mutate(across(c("cases", "population"), as.numeric))
```
:::

::: {.column width="50%"}
```{r}
tb2 |>
  unite(year, century, year_d2, sep = "") |>
  mutate(year = as.integer(year))
```
:::

::::



# ggplot2 Basics {background-color="#1C5253" visibility="uncounted"}

## Layers

## `aes()` & `geom_*`

## Color & Fill

## Shape & Size

## Scale

## Facet

## Theme

## References {visibility="uncounted"}
::: {#refs}
:::